# Checking the btparser. -*- Autotest -*-

AT_BANNER([Normalization])

m4_define([UTILS],
[#include <stdarg.h>
#include <lib/thread.h>
#include <lib/frame.h>
#include <lib/utils.h>
#include <stdlib.h>
#include <assert.h>
#include <lib/metrics.h>
#include <lib/normalize.h>

struct btp_thread *create_thread(int count, ...)
{
  struct btp_thread *thread = btp_thread_new();
  if (count == 0)
     return thread;
  int i;
  va_list argp;
  va_start(argp, count);

  for (i=0; i < count; i++)
  {
    const char *fname = va_arg(argp, const char*);
    struct btp_frame *frame = btp_frame_new();
    frame->function_name = btp_strdup(fname);

    if (thread->frames == NULL)thread->frames = frame;
    else btp_frame_add_sibling(thread->frames, frame);
  }

  va_end(argp);
  return thread;
}
])

## ------------------------------------ ##
## btp_normalize_thread_removes_zeroes  ##
## ------------------------------------ ##
# Checks that btp_normalize_thread removes the first and the last
# frame if they have address 0x0000 and function ??.
AT_TESTFUN([btp_normalize_thread_removes_zeroes],
[[
#include <lib/normalize.h>
#include <lib/frame.h>
#include <lib/thread.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdlib.h>

int main(void)
{
  struct btp_frame *frame2 = btp_frame_new();
  frame2->function_name = btp_strdup("??");
  frame2->number = 2;
  frame2->address = 0x0000;

  struct btp_frame *frame1 = btp_frame_new();
  frame1->function_name = btp_strdup("write_to_temp_file");
  frame1->number = 1;
  frame1->source_file = btp_strdup("gfileutils.c");
  frame1->source_line = 980;
  frame1->address = 0x322160e7fdULL;
  frame1->next = frame2;

  struct btp_frame *frame0 = btp_frame_new();
  frame0->function_name = btp_strdup("??");
  frame0->number = 0;
  frame0->address = 0x0000;
  frame0->next = frame1;

  struct btp_thread thread;
  btp_thread_init(&thread);
  thread.number = 0;
  thread.frames = frame0;

  btp_normalize_thread(&thread);
  assert(thread.frames == frame1);
  assert(thread.frames->next == NULL);

  btp_frame_free(frame1);
  return 0;
}
]])

AT_TESTFUN([btp_normalize_paired_unknown_function_names],
[
UTILS

int main()
{
  struct btp_thread *threads[[6]];
  struct btp_frame *frame;
  threads[[0]] = create_thread(5, "aa", "??", "??", "??", "??");
  threads[[1]] = create_thread(5, "bb", "aa", "??", "??", "??");
  threads[[2]] = create_thread(5, "aa", "??", "??", "??", "??");
  threads[[3]] = create_thread(5, "bb", "aa", "??", "??", "??");

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[5]], threads[[4]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "??", "cc", "cc", "??");
  threads[[1]] = create_thread(5, "bb", "aa", "??", "cc", "??");
  threads[[2]] = create_thread(5, "aa", "__unknown_function_0", "cc", "cc", "__unknown_function_1");
  threads[[3]] = create_thread(5, "bb", "aa","__unknown_function_0", "cc", "__unknown_function_1");

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "??", "cc", "??", "dd");
  threads[[1]] = create_thread(5, "bb", "??", "cc", "??", "dd");
  threads[[2]] = create_thread(5, "aa", "??", "cc", "__unknown_function_0", "dd");
  threads[[3]] = create_thread(5, "bb", "??", "cc", "__unknown_function_0", "dd");

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  threads[[0]] = create_thread(5, "aa", "cc", "??", "??", "??");
  threads[[1]] = create_thread(5, "bb", "??", "??", "??", "??");
  threads[[2]] = create_thread(5, "aa", "cc", "??", "??", "??");
  threads[[3]] = create_thread(5, "bb", "??", "??", "??", "??");

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[4]], threads[[5]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  threads[[4]] = btp_thread_dup(threads[[0]], false);
  threads[[5]] = btp_thread_dup(threads[[1]], false);
  btp_normalize_paired_unknown_function_names(threads[[5]], threads[[4]]);
  assert(!btp_thread_cmp(threads[[2]], threads[[4]]));
  assert(!btp_thread_cmp(threads[[3]], threads[[5]]));

  return 0;
}
])
