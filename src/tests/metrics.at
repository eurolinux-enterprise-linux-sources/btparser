AT_BANNER([Metrics])

m4_define([UTILS],
[#include <stdarg.h>
#include <lib/thread.h>
#include <lib/frame.h>
#include <lib/utils.h>
#include <stdlib.h>
#include <assert.h>
#include <lib/metrics.h>
#include <lib/normalize.h>

struct btp_thread *create_thread(int count, ...)
{
  struct btp_thread *thread = btp_thread_new();
  if (count == 0)
     return thread;
  int i;
  va_list argp;
  va_start(argp, count);

  for (i=0; i < count; i++)
  {
    const char *fname = va_arg(argp, const char*);
    struct btp_frame *frame = btp_frame_new();
    frame->function_name = btp_strdup(fname);

    if (thread->frames == NULL)thread->frames = frame;
    else btp_frame_add_sibling(thread->frames, frame);
  }

  va_end(argp);
  return thread;
}

bool is_dist_equal(float x, float y)
{
  float epsilon = 1e-6;
  return x - epsilon <= y && x + epsilon >= y;
}
])

AT_TESTFUN([metrics_all_one_thread_empty],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(0);

  struct btp_thread *thread2 = create_thread(3, "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(is_dist_equal(0.0, btp_thread_jarowinkler_distance(thread1, thread2)));
  assert(is_dist_equal(1.0, btp_thread_jaccard_distance(thread1, thread2)));
  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_all_both_threads_empty],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(0);

  struct btp_thread *thread2 = create_thread(0);

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(is_dist_equal(1.0, btp_thread_jarowinkler_distance(thread1, thread2)));
  assert(is_dist_equal(0.0, btp_thread_jaccard_distance(thread1, thread2)));
  assert(0 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_all_both_starting_??_levendistance3_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(2, "??", "sd");

  struct btp_thread *thread2 = create_thread(3, "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(is_dist_equal(0.0, btp_thread_jarowinkler_distance(thread1, thread2)));
  assert(is_dist_equal(1.0, btp_thread_jaccard_distance(thread1, thread2)));
  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_all_both_starting_??_levendistance3_b],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(1, "??");

  struct btp_thread *thread2 = create_thread(3, "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(is_dist_equal(0.0, btp_thread_jarowinkler_distance(thread1, thread2)));
  assert(is_dist_equal(1.0, btp_thread_jaccard_distance(thread1, thread2)));
  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_levendistance0_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(3, "??", "ds", "main");

  struct btp_thread *thread2 = create_thread(3, "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(0 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_levendistance0_b],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(4, "dg", "??", "ds", "main");

  struct btp_thread *thread2 = create_thread(4, "dg", "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(0 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_distance1],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(3, "dg", "??", "ds");

  struct btp_thread *thread2 = create_thread(4, "dg", "??", "ds", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(1 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_distance2_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(2, "dg", "??");

  struct btp_thread *thread2 = create_thread(3, "dg", "??", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(2 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_distance2_b],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(3, "dg", "??", "??");

  struct btp_thread *thread2 = create_thread(4, "dg", "??", "??", "main");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_random_??_distance2_c],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(3, "??", "??", "main");

  struct btp_thread *thread2 = create_thread(2, "??", "??");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_trans_??_distance2_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(5, "ale", "asd", "??", "agd", "dsa");

  struct btp_thread *thread2 = create_thread(5, "ale", "huga", "asd", "??", "agd");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(2 == btp_thread_levenshtein_distance(thread1, thread2, true));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_trans_??_distance2_b],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(4, "asd", "??", "agd", "dsa");

  struct btp_thread *thread2 = create_thread(4, "asd", "agd", "??", "dsa");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(2 == btp_thread_levenshtein_distance(thread1, thread2, true));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_swap_trans_distance2_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(4, "a", "b", "c", "d");
  struct btp_thread *thread2 = create_thread(4, "b", "a", "d", "c");

  assert(2 == btp_thread_levenshtein_distance(thread1, thread2, true));
  return 0;
}
])

AT_TESTFUN([metrics_levenshtein_swap_notrans_distance3_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(4, "a", "b", "c", "d");
  struct btp_thread *thread2 = create_thread(4, "b", "a", "d", "c");

  assert(3 == btp_thread_levenshtein_distance(thread1, thread2, false));
  return 0;
}
])

AT_TESTFUN([metrics_jaccard_random_??_distance0_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(4, "asd", "agd", "agd", "??");

  struct btp_thread *thread2 = create_thread(3, "asd", "agd", "??");

  btp_normalize_paired_unknown_function_names(thread1, thread2);

  assert(is_dist_equal(0.0, btp_thread_jaccard_distance(thread1, thread2)));
  return 0;
}
])

AT_TESTFUN([metrics_jaccard_random_??_distance23_a],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(3, "asd", "agd", "agd");

  struct btp_thread *thread2 = create_thread(2, "sad", "agd");

  assert(is_dist_equal(2/3.0, btp_thread_jaccard_distance(thread1, thread2)));
  return 0;
}
])

AT_TESTFUN([metrics_jaccard_random_??_distance35],
[
UTILS

int main()
{
  struct btp_thread *thread1 = create_thread(5, "asd", "agd", "gad", "sad", "abc");

  struct btp_thread *thread2 = create_thread(4, "sad", "sad", "sad", "gad");

  assert(is_dist_equal(3/5.0, btp_thread_jaccard_distance(thread1, thread2)));
  return 0;
}
])

AT_TESTFUN([distances_basic_properties],
[
UTILS

int main()
{
  int m = 50, n = 100, i, j;
  struct btp_distances *distances = btp_distances_new(m, n);
  float x;

  for (i = 0; i < m; i++)
    for (j = 0; j < n; j++)
      btp_distances_set_distance(distances, i, j, i + j / 1000.0);

  for (i = 0; i < m; i++)
    for (j = 0; j < n; j++)
    {
      x = btp_distances_get_distance(distances, i, j);
      if (i == j)
         assert(x == 0.0);
      else if (j < m && i < j)
         assert(is_dist_equal(j + i / 1000.0, x));
      else
         assert(is_dist_equal(i + j / 1000.0, x));
    }

  return 0;
}
])

AT_TESTFUN([distances_threads_compare],
[
UTILS

int main()
{
  struct btp_thread *threads[[4]];
  threads[[0]] = create_thread(4, "asd", "agd", "das", "??");
  threads[[1]] = create_thread(3, "asd", "agd", "??");
  threads[[2]] = create_thread(3, "asd", "agd", "??");
  threads[[3]] = create_thread(3, "dg", "??", "??");

  struct btp_distances *distances = btp_threads_compare(threads, 3, 4, btp_thread_jaccard_distance);
  assert(is_dist_equal(0.6, btp_distances_get_distance(distances, 0, 1)));
  assert(is_dist_equal(0.6, btp_distances_get_distance(distances, 0, 2)));
  assert(is_dist_equal(1.0, btp_distances_get_distance(distances, 0, 3)));
  assert(is_dist_equal(0.0, btp_distances_get_distance(distances, 1, 2)));
  assert(is_dist_equal(1.0, btp_distances_get_distance(distances, 1, 3)));
  assert(is_dist_equal(1.0, btp_distances_get_distance(distances, 2, 3)));

  return 0;
}
])
